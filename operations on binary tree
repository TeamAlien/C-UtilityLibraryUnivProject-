/******************************************************************************

                            Binary Search Tree

*******************************************************************************/

#include <stdio.h>
#include <stdlib.h>
struct node{
    int val;
    struct node *lchild;
    struct node *rchild;
};
struct node *insert(struct node *p,int key){
    struct node *newnode=(struct node *)malloc(sizeof(struct node));
    if(p==NULL){
        newnode->val=key;
        newnode->lchild=newnode->rchild=NULL;
        p=newnode;
        return p;
    }
    else if(key<p->val)
        p->lchild=insert(p->lchild,key);
    else if(key>p->val)
        p->rchild=insert(p->rchild,key);
}
void inorder(struct node *p){
    if(p!=NULL){
        inorder(p->lchild);
        printf("%d ",p->val);
        inorder(p->rchild);
    }
}
void printLeafnodes(struct node *p){
    if(p!=NULL){
        if(p->lchild==NULL && p->rchild==NULL){
            printf("%d ",p->val);
            return;
        }
        printLeafnodes(p->lchild);
        printLeafnodes(p->rchild);
    }
        
}
int main()
{
    struct node *root=NULL;
    root=insert(root,50);
    insert(root,20);
    insert(root,70);
    //inorder(root);
    printLeafnodes(root);
    return 0;
}
